{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","options","query","buildQueryParameters","targets","filter","t","hide","length","when","data","start","range","from","end","to","resp","target","tick","quandl_resp","datasourceRequest","method","headers","ts","dataset","datapoints","map","parseFloat","tup","getTime","resp_obj","push","then","status","message","title","annotation","text","tags"],"mappings":";;;;;;;;;;;;;;;AAAOA,O;;;;;;;;;;;;;;;;;;;;;mCAEMC,iB;AAEX,mCAAYC,gBAAZ,EAA8BC,EAA9B,EAAkCC,UAAlC,EAA8CC,WAA9C,EAA2D;AAAA;;AACzD,eAAKC,IAAL,GAAYJ,iBAAiBI,IAA7B;AACA,eAAKC,GAAL,GAAWL,iBAAiBK,GAA5B;AACA,eAAKC,IAAL,GAAYN,iBAAiBM,IAA7B;AACA,eAAKC,CAAL,GAASN,EAAT;AACA,eAAKC,UAAL,GAAkBA,UAAlB;AACA,eAAKC,WAAL,GAAmBA,WAAnB;AACD;;;;gCAEKK,O,EAAS;AACb,gBAAIC,QAAQ,KAAKC,oBAAL,CAA0BF,OAA1B,CAAZ;AACAC,kBAAME,OAAN,GAAgBF,MAAME,OAAN,CAAcC,MAAd,CAAqB;AAAA,qBAAK,CAACC,EAAEC,IAAR;AAAA,aAArB,CAAhB;;AAEA,gBAAIL,MAAME,OAAN,CAAcI,MAAd,IAAwB,CAA5B,EAA+B;AAC7B,qBAAO,KAAKR,CAAL,CAAOS,IAAP,CAAY,EAACC,MAAM,EAAP,EAAZ,CAAP;AACD;;AAED,gBAAIC,QAAQV,QAAQW,KAAR,CAAcC,IAA1B;AACA,gBAAIC,MAAMb,QAAQW,KAAR,CAAcG,EAAxB;;AAEA,gBAAIC,OAAO,EAAX;AACA,iBAAI,IAAIC,MAAR,IAAkBf,MAAME,OAAxB,EAAgC;AAC5B,kBAAIc,OAAOD,OAAOA,MAAlB;AACAD,mBAAKE,IAAL,IAAaF,IAAb;;AAEA,kBAAIlB,MAAM,4CAA4CoB,IAAtD;;AAEA,kBAAIC,cAAc,KAAKxB,UAAL,CAAgByB,iBAAhB,CAAkC;AAClDtB,qBAAKA,GAD6C;AAElDuB,wBAAQ,KAF0C;AAGlDC,yBAAS,EAAE,gBAAgB,kBAAlB;AAHyC,eAAlC,CAAlB;;AAMA,kBAAIC,KAAKJ,YAAYK,OAAZ,CAAoBd,IAA7B;AACA,kBAAIe,aAAalC,EAAEmC,GAAF,CAAMH,EAAN,EAAU,eAAO;AAC9B,uBAAO,CAACI,WAAWC,IAAI,CAAJ,CAAX,CAAD,EAAqBA,IAAI,CAAJ,EAAOC,OAAP,EAArB,CAAP;AACH,eAFgB,CAAjB;;AAIA,kBAAIC,WAAW,EAAf;AACAA,uBAASb,MAAT,GAAkBA,MAAlB;AACAa,uBAASL,UAAT,GAAsBA,UAAtB;AACAT,mBAAKe,IAAL,CAAUD,QAAV;AACH;;AAED,mBAAO,KAAKnC,UAAL,CAAgByB,iBAAhB,CAAkC;AACvCtB,mBAAKA,GADkC;AAEvCuB,sBAAQ,KAF+B;AAGvCC,uBAAS,EAAE,gBAAgB,kBAAlB;AAH8B,aAAlC,EAIJU,IAJI,CAIC,oBAAY,CAEnB,CANM,CAAP;AAOD;;;2CAEgB;AACf,mBAAO,EAAEC,QAAQ,SAAV,EAAqBC,SAAS,wBAA9B,EAAwDC,OAAO,SAA/D,EAAP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;;0CAEelC,O,EAAS;AACvB,mBAAO,CACH,EAAEmC,YAAYnC,QAAQmC,UAAtB,EAAkC,SAAS,6BAA3C,EAA0E,QAAQ,aAAlF,EAAiGC,MAAM,QAAvG,EAAiHC,MAAM,QAAvH,EADG,CAAP;AAGD;;;0CAEerC,O,EAAS;AACvB,mBAAO,EAAP;AACD","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    var start = options.range.from;\n    var end = options.range.to;\n\n    var resp = [];\n    for(var target in query.targets){\n        var tick = target.target;\n        resp[tick] = resp;\n\n        var url = 'https://www.quandl.com/api/v3/datasets/' + tick;\n\n        var quandl_resp = this.backendSrv.datasourceRequest({\n          url: url,\n          method: 'GET',\n          headers: { 'Content-Type': 'application/json' }\n        });\n\n        var ts = quandl_resp.dataset.data;\n        var datapoints = _.map(ts, tup => {\n            return [parseFloat(tup[1]), tup[0].getTime()]\n        });\n\n        var resp_obj = {};\n        resp_obj.target = target;\n        resp_obj.datapoints = datapoints;\n        resp.push(resp_obj);\n    }\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(response => {\n\n    });\n  }\n\n  testDatasource() {\n    return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    // return this.backendSrv.datasourceRequest({\n    //   url: this.url + '/',\n    //   method: 'GET'\n    // }).then(response => {\n    //   if (response.status === 200) {\n    //     return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n    //   }\n    // });\n  }\n\n  annotationQuery(options) {\n    return [\n        { annotation: options.annotation, \"title\": \"Donlad trump is kinda funny\", \"time\": 1450754160000, text: \"teeext\", tags: \"taaags\" },\n    ]\n  }\n\n  metricFindQuery(options) {\n    return [];\n  }\n}"]}