{"version":3,"sources":["../src/datasource.js"],"names":["_","GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","console","log","type","name","quandl_api_key","jsonData","q","options","start","range","from","end","to","targets","filter","t","hide","proms","map","tick","target","db","code","url","format","datasourceRequest","method","headers","then","resp","status","ts","data","dataset","datapoints","parseFloat","tup","Date","getTime","reverse","obj","Promise","all","catch","err","response","message","title","annotation","text","tags","codes","databases","ds","value","database_code","ret","mapToTextValue","result","d","i","isObject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    console.log(instanceSettings);\n    this.type = instanceSettings.type;\n    this.name = instanceSettings.name;\n    this.quandl_api_key = instanceSettings.jsonData.quandl_api_key;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n  }\n\n  query(options) {\n    var start = options.range.from;\n    var end = options.range.to;\n\n    options.targets = options.targets.filter(t => !t.hide);\n\n    var proms = _.map(options.targets, target => {\n        var tick = target.db + '/' + target.code;\n\n        var url = 'https://www.quandl.com/api/v3/datasets/' + tick + '.json?';\n\n        url = url + 'start_date=' + start.format('YYYY-MM-DD');\n        url = url + '&end_date=' + end.format('YYYY-MM-DD');\n        url = url + '&api_key=' + this.quandl_api_key;\n\n\n        return this.backendSrv.datasourceRequest({\n          url: url,\n          method: 'GET',\n          headers: {\n            'Content-Type': 'application/json',\n            'Access-Control-Allow-Origin': '*',\n            'Access-Control-Allow-Methods': 'GET,POST,PUT,DELETE,OPTIONS',\n            'Access-Control-Allow-Headers': 'Origin, X-Requested-With, Content-Type, Accept'\n          }\n        }).then(resp => {\n            if (resp.status === 200) {\n                var ts = resp.data.dataset.data;\n                var datapoints = _.map(ts, tup => {\n                    return [parseFloat(tup[1]), new Date(tup[0]).getTime()]\n                }).reverse();\n\n                var obj = {\n                    target: tick,\n                    datapoints: datapoints\n                }\n\n                return obj;\n            }\n            return null;\n        });\n    });\n    return Promise.all(proms)\n        .then(data => {\n            console.log(data);\n            return {data: data}\n        })\n        .catch(err => console.log('Catch', err));\n    }\n  \n\n  testDatasource() {\n    var url = 'https://www.quandl.com/api/v3/databases/codes.json?'\n    url = url + 'api_key=' + this.quandl_api_key;\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      method: 'GET'\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    return [\n        { annotation: options.annotation, \"title\": \"Donlad trump is kinda funny\", \"time\": 1450754160000, text: \"teeext\", tags: \"taaags\" },\n    ]\n  }\n\n  metricFindQuery(options) {\n\n    var url = 'https://www.quandl.com/api/v3/databases/codes.json?'\n    url = url + 'api_key=' + this.quandl_api_key;\n\n    return this.backendSrv.datasourceRequest({\n      url: url,\n      method: 'GET',\n      headers: { 'Content-Type': 'application/json' }\n    }).then(resp => {\n        var codes = _.map(resp.data.databases, ds => {\n            return {text: ds.name,value: ds.database_code};\n        });\n        var ret = this.mapToTextValue(codes);\n        return ret;\n    });\n  }\n\n  mapToTextValue(result) {\n    return _.map(result, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n\n}"]}