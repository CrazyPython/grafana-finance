{"version":3,"sources":["../../src/query_ctrl.js"],"names":["GenericDatasourceQueryCtrl","$scope","$injector","uiSegmentSrv","scope","console","log","target","db","split","code","onChangeInternal","datasource","metricFindQuery","then","transformToSegments","Promise","all","rawQuery","panelCtrl","refresh","templateUrl"],"mappings":";;;;;;;;;AAAA;;AACA;;;;;;;;IAEaA,0B,WAAAA,0B;;;AAEX,sCAAYC,MAAZ,EAAoBC,SAApB,EAA+BC,YAA/B,EAA8C;AAAA;;AAAA,wJACtCF,MADsC,EAC9BC,SAD8B;;AAG5C,UAAKE,KAAL,GAAaH,MAAb;AACA,UAAKE,YAAL,GAAoBA,YAApB;AACAE,YAAQC,GAAR,CAAY,MAAKC,MAAjB;AACA,UAAKA,MAAL,CAAYA,MAAZ,GAAqB,MAAKA,MAAL,CAAYA,MAAZ,IAAsB,WAA3C;AACA,UAAKA,MAAL,CAAYC,EAAZ,GAAiB,MAAKD,MAAL,CAAYA,MAAZ,CAAmBE,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,KAAoC,MAArD;AACA,UAAKF,MAAL,CAAYG,IAAZ,GAAmB,MAAKH,MAAL,CAAYA,MAAZ,CAAmBE,KAAnB,CAAyB,GAAzB,EAA8B,CAA9B,KAAoC,MAAvD;AACA,UAAKE,gBAAL;AAT4C;AAU7C;;;;iCAEY;AACX,aAAO,KAAKC,UAAL,CAAgBC,eAAhB,CAAgC,KAAKN,MAArC,EACJO,IADI,CACC,KAAKX,YAAL,CAAkBY,mBAAlB,CAAsC,KAAtC,CADD,CAAP;AAEE;AACH;;;qCAEgB;AACf,aAAOC,QAAQC,GAAR,CAAY,EAAZ,CAAP;AACD;;;uCAEkB;AACjB,WAAKV,MAAL,CAAYW,QAAZ,GAAuB,CAAC,KAAKX,MAAL,CAAYW,QAApC;AACD;;;uCAEkB;AACjB,WAAKX,MAAL,CAAYA,MAAZ,GAAqB,KAAKA,MAAL,CAAYC,EAAZ,GAAiB,GAAjB,GAAuB,KAAKD,MAAL,CAAYG,IAAxD;AACA,WAAKS,SAAL,CAAeC,OAAf,GAFiB,CAES;AAC3B;;;;;;AAGHpB,2BAA2BqB,WAA3B,GAAyC,4BAAzC","file":"query_ctrl.js","sourcesContent":["import {QueryCtrl} from 'app/plugins/sdk';\nimport './css/query-editor.css!'\n\nexport class GenericDatasourceQueryCtrl extends QueryCtrl {\n\n  constructor($scope, $injector, uiSegmentSrv)  {\n    super($scope, $injector);\n\n    this.scope = $scope;\n    this.uiSegmentSrv = uiSegmentSrv;\n    console.log(this.target);\n    this.target.target = this.target.target || 'LBMA/GOLD';\n    this.target.db = this.target.target.split('/')[0] || 'LBMA';\n    this.target.code = this.target.target.split('/')[1] || 'GOLD';\n    this.onChangeInternal();\n  }\n\n  getOptions() {\n    return this.datasource.metricFindQuery(this.target)\n      .then(this.uiSegmentSrv.transformToSegments(false));\n      // Options have to be transformed by uiSegmentSrv to be usable by metric-segment-model directive\n  }\n\n  getCodeOptions() {\n    return Promise.all([])\n  }\n\n  toggleEditorMode() {\n    this.target.rawQuery = !this.target.rawQuery;\n  }\n\n  onChangeInternal() {\n    this.target.target = this.target.db + '/' + this.target.code;\n    this.panelCtrl.refresh(); // Asks the panel to refresh data.\n  }\n}\n\nGenericDatasourceQueryCtrl.templateUrl = 'partials/query.editor.html';"]}